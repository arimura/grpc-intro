// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: example.proto

package grpc_intro

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToDoClient is the client API for ToDo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToDoClient interface {
	GetItem(ctx context.Context, in *Cond, opts ...grpc.CallOption) (*Item, error)
}

type toDoClient struct {
	cc grpc.ClientConnInterface
}

func NewToDoClient(cc grpc.ClientConnInterface) ToDoClient {
	return &toDoClient{cc}
}

func (c *toDoClient) GetItem(ctx context.Context, in *Cond, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/ToDo/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToDoServer is the server API for ToDo service.
// All implementations must embed UnimplementedToDoServer
// for forward compatibility
type ToDoServer interface {
	GetItem(context.Context, *Cond) (*Item, error)
	mustEmbedUnimplementedToDoServer()
}

// UnimplementedToDoServer must be embedded to have forward compatible implementations.
type UnimplementedToDoServer struct {
}

func (UnimplementedToDoServer) GetItem(context.Context, *Cond) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedToDoServer) mustEmbedUnimplementedToDoServer() {}

// UnsafeToDoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToDoServer will
// result in compilation errors.
type UnsafeToDoServer interface {
	mustEmbedUnimplementedToDoServer()
}

func RegisterToDoServer(s grpc.ServiceRegistrar, srv ToDoServer) {
	s.RegisterService(&ToDo_ServiceDesc, srv)
}

func _ToDo_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ToDo/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServer).GetItem(ctx, req.(*Cond))
	}
	return interceptor(ctx, in, info, handler)
}

// ToDo_ServiceDesc is the grpc.ServiceDesc for ToDo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToDo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ToDo",
	HandlerType: (*ToDoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _ToDo_GetItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
