// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: hoge.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HogeService_GetHoge_FullMethodName = "/hoge.HogeService/GetHoge"
)

// HogeServiceClient is the client API for HogeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HogeServiceClient interface {
	GetHoge(ctx context.Context, in *GetHogeRequest, opts ...grpc.CallOption) (*GetHogeResponse, error)
}

type hogeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHogeServiceClient(cc grpc.ClientConnInterface) HogeServiceClient {
	return &hogeServiceClient{cc}
}

func (c *hogeServiceClient) GetHoge(ctx context.Context, in *GetHogeRequest, opts ...grpc.CallOption) (*GetHogeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHogeResponse)
	err := c.cc.Invoke(ctx, HogeService_GetHoge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HogeServiceServer is the server API for HogeService service.
// All implementations must embed UnimplementedHogeServiceServer
// for forward compatibility.
type HogeServiceServer interface {
	GetHoge(context.Context, *GetHogeRequest) (*GetHogeResponse, error)
	mustEmbedUnimplementedHogeServiceServer()
}

// UnimplementedHogeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHogeServiceServer struct{}

func (UnimplementedHogeServiceServer) GetHoge(context.Context, *GetHogeRequest) (*GetHogeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHoge not implemented")
}
func (UnimplementedHogeServiceServer) mustEmbedUnimplementedHogeServiceServer() {}
func (UnimplementedHogeServiceServer) testEmbeddedByValue()                     {}

// UnsafeHogeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HogeServiceServer will
// result in compilation errors.
type UnsafeHogeServiceServer interface {
	mustEmbedUnimplementedHogeServiceServer()
}

func RegisterHogeServiceServer(s grpc.ServiceRegistrar, srv HogeServiceServer) {
	// If the following call pancis, it indicates UnimplementedHogeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HogeService_ServiceDesc, srv)
}

func _HogeService_GetHoge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHogeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HogeServiceServer).GetHoge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HogeService_GetHoge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HogeServiceServer).GetHoge(ctx, req.(*GetHogeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HogeService_ServiceDesc is the grpc.ServiceDesc for HogeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HogeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hoge.HogeService",
	HandlerType: (*HogeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHoge",
			Handler:    _HogeService_GetHoge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hoge.proto",
}
